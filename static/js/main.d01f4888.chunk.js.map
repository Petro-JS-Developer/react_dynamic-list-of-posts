{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","listPosts","selectedPostId","setPostId","className","map","post","key","id","meta-key","userId","title","type","onClick","NewCommentForm","addComment","updateCommentsForPost","form","document","AddComment","name","placeholder","method","event","a","preventDefault","body","JSON","stringify","postId","value","email","headers","BASE_URL","request","all","options","fetch","then","response","json","result","data","getUserPosts","filter","getPostComments","PostDetails","useState","visibilityComments","setVisibilityComments","detailsForPost","setPostDetails","listComments","setListComments","useEffect","detailsPost","length","comment","commentId","App","setListPosts","userPosts","onChange","target","ReactDOM","render","getElementById"],"mappings":"sUAIaA,G,kBAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,eAAgBC,EAA9B,EAA8BA,UAA9B,OACvB,yBAAKC,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXH,EAAUI,KAAI,SAAAC,GAAI,OACjB,wBAAIF,UAAU,kBAAkBG,IAAKD,EAAKE,GAAIC,WAAUH,EAAKE,IAC3D,6BACE,uCAEGF,EAAKI,OAFR,MAIG,KAEFJ,EAAKK,OAEPT,IAAmBI,EAAKE,GACvB,4BACEI,KAAK,SACLR,UAAU,2BACVS,QAAS,WACPV,MAJJ,SAWE,4BACES,KAAK,SACLR,UAAU,2BACVS,QAAS,WACPV,EAAUG,EAAKE,MAJnB,gB,uBC5BDM,G,MAAiB,SAAC,GAIxB,IAHLC,EAGI,EAHJA,WACAb,EAEI,EAFJA,eACAc,EACI,EADJA,sBAEMC,EAAOC,SAASC,WAEtB,OACE,0BAAMf,UAAU,iBAAiBgB,KAAK,cACpC,yBAAKhB,UAAU,cACb,2BACEQ,KAAK,OACLQ,KAAK,OACLC,YAAY,YACZjB,UAAU,2BAId,yBAAKA,UAAU,cACb,2BACEQ,KAAK,OACLQ,KAAK,QACLC,YAAY,aACZjB,UAAU,2BAId,yBAAKA,UAAU,cACb,8BACEgB,KAAK,OACLC,YAAY,oBACZjB,UAAU,2BAGd,4BACEQ,KAAK,SACLU,OAAO,OACPlB,UAAU,uCACVS,QAAO,uCAAE,WAAMU,GAAN,SAAAC,EAAA,6DACPD,EAAME,iBADC,SAEDV,EAAW,CACfO,OAAQ,OACRI,KAAMC,KAAKC,UAAU,CACnBC,OAAQ3B,EACRkB,KAAMH,EAAKG,KAAKU,MAChBC,MAAOd,EAAKc,MAAMD,MAClBJ,KAAMT,EAAKS,KAAKI,QAElBE,QAAS,CAAE,eAAgB,qCAVtB,OAaPf,EAAKG,KAAKU,MAAQ,GAClBb,EAAKc,MAAMD,MAAQ,GACnBb,EAAKS,KAAKI,MAAQ,GAClBd,IAhBO,2CAAF,uDAJT,oBCtCOiB,EAAW,iCAEXC,EAAU,SAACC,GAAD,IAAM3B,EAAN,uDAAW,GAAI4B,EAAf,8CAA2BC,MAAM,GAAD,OAClDJ,EADkD,YACtCE,EADsC,YAC/B3B,GAAM4B,GAE3BE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,SCJZC,EAAe,SAAAjC,GAAM,OAAIwB,EAAQ,SAC3CI,MAAK,SAAAG,GAAM,OAAIA,EAAOG,QAAO,SAAAtC,GAAI,OAChCI,EAASJ,EAAKI,SAAWA,EAASJ,SCFzBuC,EAAkB,SAAAhB,GAAM,OAAIK,EAAQ,YAC9CI,MAAK,SAAAG,GAAM,OAAIA,EAAOG,QAAO,SAAAtC,GAAI,OAAIA,EAAKuB,SAAWA,SAK3Cd,EAAa,SAAAqB,GAAO,OAAIF,EAAQ,WAAY,GAAIE,ICDhDU,G,MAAc,SAAC,GAAwB,IAAtB5C,EAAqB,EAArBA,eAAqB,EACG6C,oBAAS,GADZ,mBAC1CC,EAD0C,KACtBC,EADsB,OAERF,qBAFQ,mBAE1CG,EAF0C,KAE1BC,EAF0B,OAGTJ,qBAHS,mBAG1CK,EAH0C,KAG5BC,EAH4B,KAKjDC,qBAAU,WFLkB,IAAAzB,KEMX3B,EFNqBgC,EAAQ,QAASL,GACtDS,MAAK,SAAAG,GAAM,OAAIA,MEMXH,MAAK,SAACiB,GACLJ,EAAeI,MAGnBV,EAAgB3C,GACboC,MAAK,SAACG,GACLY,EAAgBZ,QAEnB,CAACvC,IASJ,OAAOgD,EACL,yBAAK9C,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAI8C,EAAexB,OAGpB0B,GAAgBA,EAAaI,OAAS,GAErC,6BAASpD,UAAU,yBAChB4C,EACC,4BACEpC,KAAK,SACLR,UAAU,SACVS,QAAS,WACPoC,GAAsB,KAJ1B,OASGG,EAAaI,OACb,IAVH,YAcA,4BACE5C,KAAK,SACLR,UAAU,SACVS,QAAS,WACPoC,GAAsB,KAJ1B,OAQG,IACAG,EAAaI,OACb,IAVH,YAeF,wBAAIpD,UAAU,qBACX4C,GACEI,EAAa/C,KAAI,SAAAoD,GAAO,OACzB,wBAAIlD,IAAKkD,EAAQjD,GAAIJ,UAAU,0BAC7B,4BACEQ,KAAK,SACLR,UAAU,oCACVS,QAAO,sBAAE,sBAAAW,EAAA,sED1EEkC,EC2EWD,EAAQjD,GD3EN0B,EAAQ,WAAYwB,EAC5D,CAAEpC,OAAQ,WCyEe,OAEPuB,EAAgB3C,GACboC,MAAK,SAACG,GACLY,EAAgBZ,MAJb,iCD1EE,IAAAiB,IC0EF,QAHX,KAaA,2BAAID,EAAQ/B,YAOtB,iCACE,yBAAKtB,UAAU,6BACb,kBAAC,EAAD,CACEW,WAAYA,EACZb,eAAgBA,EAChBc,sBA7EoB,WAC5B6B,EAAgB3C,GACboC,MAAK,SAACG,GACLY,EAAgBZ,YAgFlB,OChCSkB,EAnEH,WAAO,IAAD,EACkBZ,mBAAS,IAD3B,mBACT9C,EADS,KACE2D,EADF,OAEoBb,qBAFpB,mBAET7C,EAFS,KAEOC,EAFP,KAWhB,OAPAmD,qBAAU,WACRX,IACGL,MAAK,SAACuB,GACLD,EAAaC,QAEhB,IAGD,yBAAKzD,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACV0D,SAAU,SAACvC,GACmB,KAAvBA,EAAMwC,OAAOjC,MAChBa,IACGL,MAAK,SAACuB,GACLD,EAAaC,MAGjBlB,GAAcpB,EAAMwC,OAAOjC,OACxBQ,MAAK,SAACuB,GACLD,EAAaC,QAKrB,4BAAQ/B,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,oBAKN,0BAAM1B,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,UAAWA,EACXE,UAAWA,EACXD,eAAgBA,KAGnBA,EACC,yBAAKE,UAAU,gBACb,kBAAC,EAAD,CAAaF,eAAgBA,KAE7B,MC/DZ8D,IAASC,OACP,kBAAC,EAAD,MACA/C,SAASgD,eAAe,W","file":"static/js/main.d01f4888.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ listPosts, selectedPostId, setPostId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {listPosts.map(post => (\n        <li className=\"PostsList__item\" key={post.id} meta-key={post.id}>\n          <div>\n            <b>\n              [User #`$\n              {post.userId}\n              `]:\n              {' '}\n            </b>\n            {post.title}\n          </div>\n          {selectedPostId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                setPostId();\n              }}\n            >\n              Close\n            </button>\n          )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  listPosts: PropTypes.arrayOf.isRequired,\n  selectedPostId: PropTypes.string.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  addComment,\n  selectedPostId,\n  updateCommentsForPost,\n}) => {\n  const form = document.AddComment;\n\n  return (\n    <form className=\"NewCommentForm\" name=\"AddComment\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        method=\"POST\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={async(event) => {\n          event.preventDefault();\n          await addComment({\n            method: 'POST',\n            body: JSON.stringify({\n              postId: selectedPostId,\n              name: form.name.value,\n              email: form.email.value,\n              body: form.body.value,\n            }),\n            headers: { 'Content-type': 'application/json; charset=utf-8' },\n          });\n\n          form.name.value = '';\n          form.email.value = '';\n          form.body.value = '';\n          updateCommentsForPost();\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.string.isRequired,\n  updateCommentsForPost: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (all, id = '', options) => fetch(\n  `${BASE_URL}/${all}/${id}`, options,\n)\n  .then(response => response.json())\n  .then(result => result.data);\n","import { request } from './api';\n\nexport const getUserPosts = userId => request('posts')\n  .then(result => result.filter(post => (\n    userId ? post.userId === userId : post\n  )));\n\nexport const getPostDetails = postId => request('posts', postId)\n  .then(result => result);\n","import { request } from './api';\n\nexport const getPostComments = postId => request('comments')\n  .then(result => result.filter(post => post.postId === postId));\n\nexport const deleteComment = commentId => request('comments', commentId,\n  { method: 'DELETE' });\n\nexport const addComment = options => request('comments', '', options);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment, addComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [visibilityComments, setVisibilityComments] = useState(false);\n  const [detailsForPost, setPostDetails] = useState();\n  const [listComments, setListComments] = useState();\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then((detailsPost) => {\n        setPostDetails(detailsPost);\n      });\n\n    getPostComments(selectedPostId)\n      .then((result) => {\n        setListComments(result);\n      });\n  }, [selectedPostId]);\n\n  const updateCommentsForPost = () => {\n    getPostComments(selectedPostId)\n      .then((result) => {\n        setListComments(result);\n      });\n  };\n\n  return detailsForPost ? (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{detailsForPost.body}</p>\n      </section>\n\n      {listComments && listComments.length > 0 && (\n\n        <section className=\"PostDetails__comments\">\n          {visibilityComments ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityComments(false);\n              }\n              }\n            >\n              Hide\n              {listComments.length}\n              {' '}\n              comments\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityComments(true);\n              }}\n            >\n              Show\n              {' '}\n              {listComments.length}\n              {' '}\n              comments\n            </button>\n          )}\n\n          <ul className=\"PostDetails__list\">\n            {visibilityComments\n            && listComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async() => {\n                    await deleteComment(comment.id);\n                    getPostComments(selectedPostId)\n                      .then((result) => {\n                        setListComments(result);\n                      });\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n            }\n          </ul>\n        </section>\n      )}\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={addComment}\n            selectedPostId={selectedPostId}\n            updateCommentsForPost={updateCommentsForPost}\n          />\n        </div>\n      </section>\n\n    </div>\n  ) : null;\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.string.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [listPosts, setListPosts] = useState([]);\n  const [selectedPostId, setPostId] = useState();\n\n  useEffect(() => {\n    getUserPosts()\n      .then((userPosts) => {\n        setListPosts(userPosts);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              if (+event.target.value === 0) {\n                getUserPosts()\n                  .then((userPosts) => {\n                    setListPosts(userPosts);\n                  });\n              } else {\n                getUserPosts(+event.target.value)\n                  .then((userPosts) => {\n                    setListPosts(userPosts);\n                  });\n              }\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            listPosts={listPosts}\n            setPostId={setPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n        {selectedPostId ? (\n          <div className=\"App__content\">\n            <PostDetails selectedPostId={selectedPostId} />\n          </div>\n        ) : ''}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}